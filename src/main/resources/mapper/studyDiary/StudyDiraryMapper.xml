<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0/EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.takoyakki.backend.domain.studyDiary.repository.StudyDiaryMapper">

    <resultMap id="studyDiarySelectResultMap" type="StudyDiarySelectResponseDto">
        <id property="id" column="diary_id"/>
        <result property="title" column="title"/>
        <result property="subject" column="subject"/>
        <result property="content" column="contents"/>
        <result property="summary" column="AI_summary"/>
        <result property="createdAt" column="created_at"/>
        <result property="writerName" column="member_name"/>
        <result property="likesCount" column="likes_count"/> </resultMap>

    <select id="findAllByMemberId" resultMap="studyDiarySelectResultMap">
        SELECT
            sd.diary_id,
            sd.title,
            sd.subject,
            sd.contents,
            sd.AI_summary,
            sd.created_at,
            m.member_name,
            FALSE AS is_public, -- is_public이 DB에 없으므로 임시로 FALSE 반환
            0 AS likes_count
        FROM
            study_diary sd
        JOIN
            members m ON sd.member_id = m.member_id
        WHERE
            sd.member_id = #{memberId}
            AND sd.is_deleted = FALSE
            <if test="subject != null and subject != ''">
                AND sd.subject = #{subject}
            </if>
        ORDER BY sd.created_at DESC
    </select>

    <select id="findAllPublic" resultMap="studyDiarySelectResultMap">
        -- SELECT 쿼리가 현재 DB 스키마에 is_public 컬럼이 없어 올바르게 작동하지 않습니다.
        -- is_public 컬럼이 추가된 후 아래 쿼리를 활성화하십시오.
        SELECT
            sd.diary_id,
            sd.title,
            sd.subject,
            sd.AI_summary,
            sd.created_at,
            m.member_name,
            TRUE AS is_public, -- 공개 조회이므로 TRUE 반환 (스키마 업데이트 전까지 임시)
            0 AS likes_count
        FROM
            study_diary sd
        JOIN
            members m ON sd.member_id = m.member_id
        WHERE
            -- sd.is_public = TRUE AND -- 이 조건은 schema.sql 업데이트 후 추가
            sd.is_deleted = FALSE
            <if test="subject != null and subject != ''">
                AND sd.subject = #{subject}
            </if>
        ORDER BY sd.created_at DESC
        LIMIT 0 -- 현재는 데이터가 없도록 하여 오동작 방지
    </select>

    <select id="findAllByOtherMemberId" resultMap="studyDiarySelectResultMap">
        SELECT
            sd.diary_id,
            sd.title,
            sd.subject,
            sd.contents,
            sd.AI_summary,
            sd.created_at,
            m.member_name,
            FALSE AS is_public, -- is_public이 DB에 없으므로 임시로 FALSE 반환
            0 AS likes_count
        FROM
            study_diary sd
        JOIN
            members m ON sd.member_id = m.member_id
        WHERE
            sd.member_id = #{memberId}
            AND sd.is_deleted = FALSE
            -- 다른 멤버의 학습일지를 조회할 때 공개 여부를 필터링할지 여부에 따라 is_public = TRUE 조건 추가 가능
            -- 현재 schema.sql에 is_public이 없으므로 추가하지 않습니다.
            <if test="subject != null and subject != ''">
                AND sd.subject = #{subject}
            </if>
        ORDER BY sd.created_at DESC
    </select>

    <select id="findById" resultMap="studyDiarySelectResultMap">
        SELECT
            sd.diary_id,
            sd.title,
            sd.subject,
            sd.contents,
            sd.AI_summary,
            sd.created_at,
            m.member_name,
            FALSE AS is_public, -- is_public이 DB에 없으므로 임시로 FALSE 반환
            0 AS likes_count
        FROM
            study_diary sd
        JOIN
            members m ON sd.member_id = m.member_id
        WHERE
            sd.diary_id = #{diaryId}
            AND sd.is_deleted = FALSE
    </select>

    <insert id="insertStudyDiary">
        INSERT INTO study_diary (
            diary_id, -- diary_id는 외부에서 생성하여 삽입해야 함 (담당자와 논의 필요)
            member_id,
            title,
            subject,
            contents,
            created_at,
            AI_summary,
            is_deleted
            -- is_public 컬럼은 현재 schema.sql에 없으므로 제외
        ) VALUES (
            -- 임시로 현재 시간의 나노초를 ID로 사용 (고유성 보장 안됨. DB의 IDENTITY 필요)
            CAST(EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000000 AS BIGINT),
            #{memberId},
            #{dto.title},
            #{dto.subject},
            #{dto.content},
            #{dto.date},
            #{dto.aiSummary},
            FALSE
        )
    </insert>

    <update id="updateStudyDiary">
        UPDATE study_diary
        SET
            title = #{dto.title},
            subject = #{dto.subject},
            contents = #{dto.content},
            updated_at = CURRENT_TIMESTAMP
            -- is_public 컬럼은 현재 schema.sql에 없으므로 제외
        WHERE
            diary_id = #{diaryId}
            AND member_id = #{memberId}
            AND is_deleted = FALSE
    </update>

    <update id="deleteStudyDiary">
        UPDATE study_diary
        SET
            is_deleted = TRUE,
            updated_at = CURRENT_TIMESTAMP
        WHERE
            diary_id = #{diaryId}
            AND member_id = #{memberId}
    </update>

    <update id="updateAiSummary">
        UPDATE study_diary
        SET
            AI_summary = #{aiSummary},
            updated_at = CURRENT_TIMESTAMP
        WHERE
            diary_id = #{diaryId}
    </update>

    <select id="findByDiaryIdAndMemberId" resultType="StudyDiary">
        SELECT
            diary_id,
            member_id,
            contents,
            title,
            subject,
            created_at,
            updated_at,
            AI_summary,
            is_deleted
            -- is_public은 현재 schema.sql에 없으므로 제외
        FROM
            study_diary
        WHERE
            diary_id = #{diaryId}
            AND member_id = #{memberId}
            AND is_deleted = FALSE
    </select>

</mapper>